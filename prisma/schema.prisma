// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// REQUIRED FOR NEXT-AUTH
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// APP-SPECIFIC MODELS

enum PlanTier {
  STARTER
  PRO
  DIRECTOR
}

enum PlaybookStatus {
  PENDING
  COMPLETED
  FAILED
}

model DropdownOption {
  id          String   @id @default(cuid())
  category    String   // "influence" or "relationship"
  value       String   // The actual value (e.g., "HIGH", "ALLY")
  label       String   // Display label (e.g., "High Influence", "Strong Ally")
  description String?  // Optional description for admin clarity
  sortOrder   Int      @default(0) // For ordering options in dropdowns
  isActive    Boolean  @default(true) // Allow deactivating without deleting
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([category, value])
  @@map("dropdown_options")
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?   @map("email_verified")
  image           String?
  planTier        PlanTier    @default(STARTER) @map("plan_tier")
  playbookCredits Int         @default(1) @map("playbook_credits")
  linkedinUrl     String?     @map("linkedin_url")
  
  // Stripe subscription fields
  stripeCustomerId String?    @unique @map("stripe_customer_id")
  stripePriceId    String?    @map("stripe_price_id")
  hasAccess        Boolean    @default(false) @map("has_access")
  
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  accounts     Account[]
  sessions     Session[]
  stakeholders Stakeholder[]
  playbooks    Playbook[]

  @@map("users")
}

model Stakeholder {
  id           String   @id @default(cuid())
  name         String
  linkedinUrl  String   @map("linkedin_url")
  title        String?
  company      String?
  role         String   @default("")
  department   String   @default("")
  influence    String   @default("MEDIUM") // HIGH, MEDIUM, LOW
  relationship String   @default("NEUTRAL") // ALLY, NEUTRAL, SKEPTICAL, OPPONENT
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  playbooks Playbook[]

  @@unique([userId, linkedinUrl])
  @@map("stakeholders")
}

model Playbook {
  id        String         @id @default(cuid())
  status    PlaybookStatus @default(PENDING)
  content   Json?          // The AI-generated playbook content from n8n
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stakeholderId String      @map("stakeholder_id")
  stakeholder   Stakeholder @relation(fields: [stakeholderId], references: [id], onDelete: Cascade)

  @@map("playbooks")
}
